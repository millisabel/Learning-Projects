"use strict";

function removeClass(item, removeClass) {
  if (!item) {
    console.log(item + ' no find');
    return;
  }

  if (item.classList.toggle(removeClass)) {
    item.classList.remove(removeClass);
  }
}

function addClass(item, addClass) {
  if (!item) {
    console.log(item + ' no find');
    return;
  }

  if (!!item.classList.toggle(addClass)) {
    item.classList.add(addClass);
  }
}

function createItems(newItem, length, parent) {
  if (length === 1) {
    var item = document.createElement(newItem);
    parent.append(item);
    return item;
  }

  for (var i = 0; i < length; i++) {
    var _item = document.createElement(newItem);

    parent.append(_item);
  }
}

function initBtnMenu() {
  var menu = document.querySelector('.header');
  var boxForBtn = document.querySelector('.header__logo');
  var btn = createBtnClose(menu, boxForBtn);
  addClass(menu, 'js-menu');
  resize(menu, btn);
  window.addEventListener('resize', function () {
    resize(menu, btn);
  });
}

function resize(box, btn) {
  if (document.body.offsetWidth > 749) {
    if (box.classList.contains('js-menu--close')) {
      removeClass(box, 'js-menu--close');
    }

    if (btn.style.display !== 'none') {
      btn.style.display = 'none';
    }
  } else {
    if (!box.classList.contains('js-menu--close')) {
      addClass(box, 'js-menu--close');
    }

    if (btn.style.display !== 'flex') {
      btn.style.display = 'flex';
    }
  }
}

function createBtnClose(box, parentBtn) {
  var btn = createItems('button', 1, parentBtn);
  createItems('span', 3, btn);
  btn.classList.add('btn--close');
  btn.addEventListener('click', function () {
    box.classList.toggle('js-menu--close');
  });
  return btn;
}

function initModal() {
  var btnOpenModal = document.querySelectorAll('[data-open-modal]');
  var btnCloseModal = document.querySelectorAll('[data-close-modal]');
  var openModal = null;

  var _loop = function _loop(i) {
    btnOpenModal[i].addEventListener('click', function () {
      if (openModal) {
        addClass(openModal, 'modal--close');
      }

      openModal = document.querySelector('#' + btnOpenModal[i].getAttribute('data-open-modal'));
      removeClass(openModal, 'modal--close');
      checkHeight(openModal);
    });
  };

  for (var i = 0; i < btnOpenModal.length; i++) {
    _loop(i);
  }

  for (var _i = 0; _i < btnCloseModal.length; _i++) {
    btnCloseModal[_i].addEventListener('click', function () {
      addClass(openModal, 'modal--close');
      openModal = null;
      checkHeight(openModal);
    });
  }

  if (document.querySelector('#modalFilter')) {
    var checkFilter = displayFilter();
    checkFilter();
    window.addEventListener('resize', function () {
      checkFilter();
    });
  }
}

function checkHeight(modal) {
  if (!modal) {
    document.body.classList.remove('page--no-scroll');
    return;
  }

  if (modal.firstElementChild.offsetHeight > modal.offsetHeight) {
    modal.style.alignItems = "flex-start";
    document.body.classList.add('page--no-scroll');
  } else {
    modal.style.alignItems = "center";
  }
}

function displayFilter() {
  var modal = document.querySelector('#modalFilter .modal__content');
  var parent = document.querySelector('.numbers__content');
  var filter = document.querySelector('.filter');
  var itemMoved = false;

  function moveFilter() {
    if (document.body.offsetWidth < 1200) {
      if (!itemMoved) {
        itemMoved = true;
        modal.append(filter);
      }
    } else {
      if (itemMoved) {
        itemMoved = false;
        parent.prepend(filter);
      }
    }
  }

  return moveFilter;
} // fixme: страница прокручивается вверх
// fixme: прыгает ширина страницы


var isFilter = 0;

function filter() {
  var inputPrice = document.querySelectorAll('input[name="price"]');
  var inputArea = document.querySelectorAll('input[name="area"]');
  var inputEquipment = document.querySelectorAll('input[name="equipment"]');
  var card = document.querySelectorAll('.card--room');
  var cards = [];

  for (var i = 0; i < card.length; i++) {
    cards.push(new Card(card[i]));
  } // addInputListener(inputPrice, cards);


  addListener(inputArea, cards);
  addListener(inputEquipment, cards);
}

function Card(item) {
  this.card = item;
  this.price = this.card.getAttribute('data-filter-price');
  this.area = this.card.getAttribute('data-filter-area');
  this.equipment = this.card.getAttribute('data-filter-equipment').split(',');
  this.show = true;
}

function addListener(inputs, cards) {
  var _loop2 = function _loop2(i) {
    inputs[i].addEventListener('click', function () {
      // по какому полю будем фильтровать
      var field = inputs[i].name; // сброс при выборе первого инпута

      resetShowCards(cards);

      if (field === 'area') {
        listenerForArea(inputs[i], cards);
      }

      if (field === 'equipment') {
        listenerForEquipment(inputs[i], cards);
      }

      if (isFilter <= 1) {
        showCards(cards);
      }

      console.log(isFilter);
    });
  };

  for (var i = 0; i < inputs.length; i++) {
    _loop2(i);
  }
}

function listenerForArea(input, cards) {
  if (input.checked) {
    isFilter++;

    for (var j = 0; j < cards.length; j++) {
      if (cards[j].area === input.getAttribute('data-value')) {
        cards[j].show = true;
      }

      if (isFilter > 1) {
        showCards(cards[j]);
      }
    }
  } else {
    isFilter--;

    if (!isFilter) {
      for (var _j = 0; _j < cards.length; _j++) {
        cards[_j].show = true;
      }
    } else {
      for (var _j2 = 0; _j2 < cards.length; _j2++) {
        if (cards[_j2].area === input.getAttribute('data-value')) {
          cards[_j2].show = false;
        }

        if (isFilter > 1) {
          showCards(cards[_j2]);
        }
      }
    }
  }
}

function listenerForEquipment(input, cards) {
  if (input.checked) {
    isFilter++;

    for (var j = 0; j < cards.length; j++) {
      console.log(cards[j].equipment);

      if (cards[j].equipment === input.getAttribute('data-value')) {}
    }
  }
}

function resetShowCards(cards) {
  if (!isFilter) {
    for (var j = 0; j < cards.length; j++) {
      cards[j].show = false;
    }
  }
}

function showCards(cards) {
  if (Array.isArray(cards)) {
    for (var i = 0; i < cards.length; i++) {
      showCard(cards[i]);
    }
  } else {
    showCard(cards);
  }

  function showCard(card) {
    if (card.show) {
      card.card.style.display = 'flex';
    } else {
      card.card.style.display = 'none';
    }
  }
}

window.addEventListener('load', function () {
  initBtnMenu();
  initModal();

  if (document.querySelector('#rooms .slider--rooms')) {
    $('#rooms .slider--rooms').slick({
      arrows: true,
      dots: true,
      speed: 800,
      slidesToShow: 1,
      variableWidth: true,
      appendDots: $('#rooms .slider__control'),
      appendArrows: $('#rooms .slider__control'),
      responsive: [{
        breakpoint: 768,
        settings: {
          infinite: false,
          arrows: false,
          slidesToShow: 1,
          variableWidth: true
        }
      }]
    });
  }

  if (document.querySelector('#reviews .slider--comment')) {
    $('#reviews .slider--comment').slick({
      infinite: false,
      initialSlide: 1,
      centerMode: true,
      arrows: false,
      dots: true,
      variableWidth: true,
      currentSlide: $('#rooms .slider__item--active'),
      appendArrows: $('#reviews .slider__control'),
      appendDots: $('#reviews .slider__control'),
      responsive: [{
        breakpoint: 768,
        settings: {
          arrows: false
        }
      }, {
        breakpoint: 1400,
        settings: {
          arrows: true
        }
      }]
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
